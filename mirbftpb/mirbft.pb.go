// Code generated by protoc-gen-go.
// source: mirbft.proto
// DO NOT EDIT!

/*
Package mirbftpb is a generated protocol buffer package.

It is generated from these files:
	mirbft.proto

It has these top-level messages:
	Msg
	Preprepare
	Prepare
	Commit
	Forward
*/
package mirbftpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Msg struct {
	// Types that are valid to be assigned to Type:
	//	*Msg_Preprepare
	//	*Msg_Prepare
	//	*Msg_Commit
	//	*Msg_Forward
	Type isMsg_Type `protobuf_oneof:"type"`
}

func (m *Msg) Reset()                    { *m = Msg{} }
func (m *Msg) String() string            { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()               {}
func (*Msg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isMsg_Type interface {
	isMsg_Type()
}

type Msg_Preprepare struct {
	Preprepare *Preprepare `protobuf:"bytes,1,opt,name=preprepare,oneof"`
}
type Msg_Prepare struct {
	Prepare *Prepare `protobuf:"bytes,2,opt,name=prepare,oneof"`
}
type Msg_Commit struct {
	Commit *Commit `protobuf:"bytes,3,opt,name=commit,oneof"`
}
type Msg_Forward struct {
	Forward *Forward `protobuf:"bytes,4,opt,name=forward,oneof"`
}

func (*Msg_Preprepare) isMsg_Type() {}
func (*Msg_Prepare) isMsg_Type()    {}
func (*Msg_Commit) isMsg_Type()     {}
func (*Msg_Forward) isMsg_Type()    {}

func (m *Msg) GetType() isMsg_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Msg) GetPreprepare() *Preprepare {
	if x, ok := m.GetType().(*Msg_Preprepare); ok {
		return x.Preprepare
	}
	return nil
}

func (m *Msg) GetPrepare() *Prepare {
	if x, ok := m.GetType().(*Msg_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *Msg) GetCommit() *Commit {
	if x, ok := m.GetType().(*Msg_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *Msg) GetForward() *Forward {
	if x, ok := m.GetType().(*Msg_Forward); ok {
		return x.Forward
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Msg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Msg_OneofMarshaler, _Msg_OneofUnmarshaler, _Msg_OneofSizer, []interface{}{
		(*Msg_Preprepare)(nil),
		(*Msg_Prepare)(nil),
		(*Msg_Commit)(nil),
		(*Msg_Forward)(nil),
	}
}

func _Msg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Msg)
	// type
	switch x := m.Type.(type) {
	case *Msg_Preprepare:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Preprepare); err != nil {
			return err
		}
	case *Msg_Prepare:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *Msg_Commit:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *Msg_Forward:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Forward); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Msg.Type has unexpected type %T", x)
	}
	return nil
}

func _Msg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Msg)
	switch tag {
	case 1: // type.preprepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Preprepare)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_Preprepare{msg}
		return true, err
	case 2: // type.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Prepare)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_Prepare{msg}
		return true, err
	case 3: // type.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Commit)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_Commit{msg}
		return true, err
	case 4: // type.forward
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Forward)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_Forward{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Msg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Msg)
	// type
	switch x := m.Type.(type) {
	case *Msg_Preprepare:
		s := proto.Size(x.Preprepare)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_Prepare:
		s := proto.Size(x.Prepare)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_Commit:
		s := proto.Size(x.Commit)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_Forward:
		s := proto.Size(x.Forward)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Preprepare struct {
	SeqNo  uint64   `protobuf:"varint,1,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	Epoch  uint64   `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	Bucket uint64   `protobuf:"varint,3,opt,name=bucket" json:"bucket,omitempty"`
	Batch  [][]byte `protobuf:"bytes,4,rep,name=batch,proto3" json:"batch,omitempty"`
}

func (m *Preprepare) Reset()                    { *m = Preprepare{} }
func (m *Preprepare) String() string            { return proto.CompactTextString(m) }
func (*Preprepare) ProtoMessage()               {}
func (*Preprepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Prepare struct {
	SeqNo  uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	Epoch  uint64 `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	Bucket uint64 `protobuf:"varint,3,opt,name=bucket" json:"bucket,omitempty"`
	Digest []byte `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *Prepare) Reset()                    { *m = Prepare{} }
func (m *Prepare) String() string            { return proto.CompactTextString(m) }
func (*Prepare) ProtoMessage()               {}
func (*Prepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Commit struct {
	SeqNo  uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	Epoch  uint64 `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	Bucket uint64 `protobuf:"varint,3,opt,name=bucket" json:"bucket,omitempty"`
	Digest []byte `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Forward struct {
	Epoch  uint64 `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
	Bucket uint64 `protobuf:"varint,2,opt,name=bucket" json:"bucket,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Forward) Reset()                    { *m = Forward{} }
func (m *Forward) String() string            { return proto.CompactTextString(m) }
func (*Forward) ProtoMessage()               {}
func (*Forward) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Msg)(nil), "mirbftpb.Msg")
	proto.RegisterType((*Preprepare)(nil), "mirbftpb.Preprepare")
	proto.RegisterType((*Prepare)(nil), "mirbftpb.Prepare")
	proto.RegisterType((*Commit)(nil), "mirbftpb.Commit")
	proto.RegisterType((*Forward)(nil), "mirbftpb.Forward")
}

func init() { proto.RegisterFile("mirbft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x92, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0xd7, 0x2d, 0x4b, 0xe5, 0xd8, 0x0b, 0x0d, 0x73, 0xf4, 0x72, 0xf4, 0x6a, 0x08, 0xf6,
	0x42, 0xc1, 0x07, 0x50, 0x90, 0x81, 0x28, 0x23, 0x2f, 0x20, 0x49, 0x9b, 0x76, 0x45, 0x6a, 0xb2,
	0x34, 0x22, 0x3e, 0xa5, 0xaf, 0x24, 0x3d, 0x49, 0xad, 0x13, 0x2f, 0x15, 0x7a, 0xd1, 0xaf, 0xe7,
	0xf7, 0x7d, 0xe7, 0x0f, 0x85, 0xa4, 0x6d, 0xac, 0xac, 0x5c, 0x6e, 0xac, 0x76, 0x9a, 0x1d, 0x79,
	0x65, 0x64, 0xf6, 0x11, 0xc1, 0xec, 0xa1, 0xab, 0xd9, 0x35, 0x80, 0xb1, 0xaa, 0x7f, 0x84, 0x55,
	0x69, 0xb4, 0x8a, 0xd6, 0xc7, 0x97, 0x8b, 0x7c, 0xc0, 0xf2, 0xed, 0x57, 0x6d, 0x33, 0xe1, 0xdf,
	0x48, 0x76, 0x01, 0xf1, 0x60, 0x9a, 0xa2, 0xe9, 0xf4, 0xd0, 0xe4, 0x1d, 0x03, 0xc3, 0xce, 0x81,
	0x16, 0xba, 0x6d, 0x1b, 0x97, 0xce, 0x90, 0x3e, 0x19, 0xe9, 0x5b, 0xfc, 0xbe, 0x99, 0xf0, 0x40,
	0xf4, 0xd1, 0x95, 0xb6, 0x6f, 0xc2, 0x96, 0x29, 0xf9, 0x19, 0x7d, 0xe7, 0x0b, 0x7d, 0x74, 0x60,
	0x6e, 0x28, 0x10, 0xf7, 0x6e, 0x54, 0x56, 0x03, 0x8c, 0xd3, 0xb2, 0x33, 0xa0, 0x9d, 0xda, 0x3f,
	0xbd, 0x68, 0xdc, 0x89, 0xf0, 0x79, 0xa7, 0xf6, 0x8f, 0x9a, 0x2d, 0x60, 0xae, 0x8c, 0x2e, 0x76,
	0x38, 0x34, 0xe1, 0x5e, 0xb0, 0x25, 0x50, 0xf9, 0x5a, 0x3c, 0x2b, 0x3f, 0x1d, 0xe1, 0x41, 0xf5,
	0xb4, 0x14, 0xae, 0xd8, 0xa5, 0x64, 0x35, 0x5b, 0x27, 0xdc, 0x8b, 0xac, 0x82, 0x78, 0xfb, 0x97,
	0x5d, 0x96, 0x40, 0xcb, 0xa6, 0x56, 0x9d, 0xc3, 0x75, 0x13, 0x1e, 0x54, 0xa6, 0x80, 0xfa, 0xdb,
	0xfc, 0x6f, 0x9b, 0x7b, 0x88, 0xc3, 0x55, 0xc7, 0xc0, 0xe8, 0xf7, 0xc0, 0xe9, 0x41, 0x20, 0x03,
	0x52, 0x0a, 0x27, 0xb0, 0x4d, 0xc2, 0xf1, 0x5d, 0x52, 0xfc, 0xcf, 0xae, 0x3e, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xbd, 0xac, 0xcd, 0xa9, 0x77, 0x02, 0x00, 0x00,
}
