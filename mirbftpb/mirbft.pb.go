// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mirbft.proto

/*
Package mirbftpb is a generated protocol buffer package.

It is generated from these files:
	mirbft.proto

It has these top-level messages:
	NetworkConfig
	Persisted
	QEntry
	PEntry
	Msg
	FetchBatch
	ForwardBatch
	ForwardRequest
	Request
	RequestAck
	Preprepare
	Prepare
	Commit
	Checkpoint
	Suspect
	EpochChange
	EpochChangeAck
	EpochConfig
	NewEpoch
	NewEpochEcho
	NewEpochReady
*/
package mirbftpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// NetworkConfig contains the parameters which must be agreed upon by
// the entire network.  It must be serialized and reflected in the state
// snapshots and their corresponding checkpoint values.
type NetworkConfig struct {
	// Nodes represent the active nodeIDs in the network.
	// The number of nodeIDs corresponds to the size of the network.
	Nodes []uint64 `protobuf:"varint,1,rep,packed,name=nodes" json:"nodes,omitempty"`
	// CheckpointInterval is how often checkpoints are taken.  In terms of
	// of sequence numbers, this is multiplied by the configured number of
	// buckets, so that it scales naturally as the number of buckets increases
	// or decreases.
	CheckpointInterval int32 `protobuf:"varint,2,opt,name=checkpoint_interval,json=checkpointInterval" json:"checkpoint_interval,omitempty"`
	// MaxEpochLength is the maximum number of sequence numbers which may preprepare
	// in an epoch.  This is to force bucket rotation even when the system is otherwise
	// in a healthy state.  Setting this value to uint64_max will effectively disable
	// graceful epoch changes.
	MaxEpochLength uint64 `protobuf:"varint,3,opt,name=max_epoch_length,json=maxEpochLength" json:"max_epoch_length,omitempty"`
	// NumberOfBuckets is the number of buckets the network is configured to operate over.
	// Each bucket is a partition of the request space.  Typically, number of buckets should
	// be nodes * m, where 'm' is some small constant.  Setting this value to 1 effectively
	// reduces Mir to PBFT.
	NumberOfBuckets int32 `protobuf:"varint,4,opt,name=number_of_buckets,json=numberOfBuckets" json:"number_of_buckets,omitempty"`
	// F is the number of byzantine faults tolerated by the network.
	// It must be less than len(nodes)/3 (truncated).  The 'F' parameter
	// need not be maximal, ie, a network of 9 nodes with 'F' set to 1 may
	// simultaneously tolerate 1 byzantine fault, and 2 crash faults.  Whereas
	// when F=2, that 9 node network may only tolerate 2 crash faults.  Note
	// usually, a maximal value makes sense.  For instance in a network of 7
	// nodes F=1, and F=2 both provide crash tolerance of only 2 nodes.  The
	// following table summarizes the number of crash faults tolerated for
	// a given network of size N and number of byzantine faults tolerated F.
	//
	//    |           F           |
	//    | 0 | 1 | 2 | 3 | 4 | 5 |
	// N --------------------------
	// 1  | 0 |   |   |   |   |   |
	// 2  | 0 |   |   |   |   |   |
	// 3  | 1 |   |   |   |   |   |
	// 4  | 1 | 1 |   |   |   |   |
	// 5  | 2 | 1 |   |   |   |   |
	// 6  | 2 | 1 |   |   |   |   |
	// 7  | 3 | 2 | 2 |   |   |   |
	// 8  | 3 | 3 | 2 |   |   |   |
	// 9  | 4 | 3 | 2 |   |   |   |
	// 10 | 4 | 4 | 3 | 3 |   |   |
	// 11 | 5 | 4 | 4 | 3 |   |   |
	// 12 | 5 | 5 | 4 | 4 |   |   |
	// 13 | 6 | 5 | 5 | 4 | 4 |   |
	// 14 | 6 | 6 | 5 | 5 | 4 |   |
	// 15 | 7 | 6 | 6 | 5 | 5 |   |
	// 16 | 7 | 7 | 6 | 6 | 5 | 5 |
	// 17 | 8 | 7 | 7 | 6 | 6 | 5 |
	F int32 `protobuf:"varint,5,opt,name=f" json:"f,omitempty"`
}

func (m *NetworkConfig) Reset()                    { *m = NetworkConfig{} }
func (m *NetworkConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkConfig) ProtoMessage()               {}
func (*NetworkConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NetworkConfig) GetNodes() []uint64 {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *NetworkConfig) GetCheckpointInterval() int32 {
	if m != nil {
		return m.CheckpointInterval
	}
	return 0
}

func (m *NetworkConfig) GetMaxEpochLength() uint64 {
	if m != nil {
		return m.MaxEpochLength
	}
	return 0
}

func (m *NetworkConfig) GetNumberOfBuckets() int32 {
	if m != nil {
		return m.NumberOfBuckets
	}
	return 0
}

func (m *NetworkConfig) GetF() int32 {
	if m != nil {
		return m.F
	}
	return 0
}

// Persisted contains data that should be persited by lib user
type Persisted struct {
	// Types that are valid to be assigned to Type:
	//	*Persisted_Qentry
	//	*Persisted_Pentry
	//	*Persisted_Checkpoint
	Type isPersisted_Type `protobuf_oneof:"type"`
}

func (m *Persisted) Reset()                    { *m = Persisted{} }
func (m *Persisted) String() string            { return proto.CompactTextString(m) }
func (*Persisted) ProtoMessage()               {}
func (*Persisted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isPersisted_Type interface {
	isPersisted_Type()
}

type Persisted_Qentry struct {
	Qentry *QEntry `protobuf:"bytes,1,opt,name=qentry,oneof"`
}
type Persisted_Pentry struct {
	Pentry *PEntry `protobuf:"bytes,2,opt,name=pentry,oneof"`
}
type Persisted_Checkpoint struct {
	Checkpoint *Checkpoint `protobuf:"bytes,3,opt,name=checkpoint,oneof"`
}

func (*Persisted_Qentry) isPersisted_Type()     {}
func (*Persisted_Pentry) isPersisted_Type()     {}
func (*Persisted_Checkpoint) isPersisted_Type() {}

func (m *Persisted) GetType() isPersisted_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Persisted) GetQentry() *QEntry {
	if x, ok := m.GetType().(*Persisted_Qentry); ok {
		return x.Qentry
	}
	return nil
}

func (m *Persisted) GetPentry() *PEntry {
	if x, ok := m.GetType().(*Persisted_Pentry); ok {
		return x.Pentry
	}
	return nil
}

func (m *Persisted) GetCheckpoint() *Checkpoint {
	if x, ok := m.GetType().(*Persisted_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Persisted) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Persisted_OneofMarshaler, _Persisted_OneofUnmarshaler, _Persisted_OneofSizer, []interface{}{
		(*Persisted_Qentry)(nil),
		(*Persisted_Pentry)(nil),
		(*Persisted_Checkpoint)(nil),
	}
}

func _Persisted_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Persisted)
	// type
	switch x := m.Type.(type) {
	case *Persisted_Qentry:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Qentry); err != nil {
			return err
		}
	case *Persisted_Pentry:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pentry); err != nil {
			return err
		}
	case *Persisted_Checkpoint:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Checkpoint); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Persisted.Type has unexpected type %T", x)
	}
	return nil
}

func _Persisted_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Persisted)
	switch tag {
	case 1: // type.qentry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QEntry)
		err := b.DecodeMessage(msg)
		m.Type = &Persisted_Qentry{msg}
		return true, err
	case 2: // type.pentry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PEntry)
		err := b.DecodeMessage(msg)
		m.Type = &Persisted_Pentry{msg}
		return true, err
	case 3: // type.checkpoint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Checkpoint)
		err := b.DecodeMessage(msg)
		m.Type = &Persisted_Checkpoint{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Persisted_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Persisted)
	// type
	switch x := m.Type.(type) {
	case *Persisted_Qentry:
		s := proto.Size(x.Qentry)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Persisted_Pentry:
		s := proto.Size(x.Pentry)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Persisted_Checkpoint:
		s := proto.Size(x.Checkpoint)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// QEntry is an entry which must be persisted before a batch is Preprepared (ie,
// before a Preprepare or Prepare message is sent).
type QEntry struct {
	Epoch    uint64            `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
	SeqNo    uint64            `protobuf:"varint,2,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	Digest   []byte            `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Requests []*ForwardRequest `protobuf:"bytes,4,rep,name=requests" json:"requests,omitempty"`
}

func (m *QEntry) Reset()                    { *m = QEntry{} }
func (m *QEntry) String() string            { return proto.CompactTextString(m) }
func (*QEntry) ProtoMessage()               {}
func (*QEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QEntry) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QEntry) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *QEntry) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *QEntry) GetRequests() []*ForwardRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

// PEntry is an entry which must be persisted before a batch is Prepared (ie,
// before a Commit message is sent).
type PEntry struct {
	Epoch  uint64 `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
	SeqNo  uint64 `protobuf:"varint,2,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *PEntry) Reset()                    { *m = PEntry{} }
func (m *PEntry) String() string            { return proto.CompactTextString(m) }
func (*PEntry) ProtoMessage()               {}
func (*PEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PEntry) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *PEntry) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *PEntry) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type Msg struct {
	// Types that are valid to be assigned to Type:
	//	*Msg_Preprepare
	//	*Msg_Prepare
	//	*Msg_Commit
	//	*Msg_Checkpoint
	//	*Msg_Suspect
	//	*Msg_EpochChange
	//	*Msg_EpochChangeAck
	//	*Msg_NewEpoch
	//	*Msg_NewEpochEcho
	//	*Msg_NewEpochReady
	//	*Msg_FetchBatch
	//	*Msg_ForwardBatch
	//	*Msg_FetchRequest
	//	*Msg_ForwardRequest
	//	*Msg_RequestAck
	Type isMsg_Type `protobuf_oneof:"type"`
}

func (m *Msg) Reset()                    { *m = Msg{} }
func (m *Msg) String() string            { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()               {}
func (*Msg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isMsg_Type interface {
	isMsg_Type()
}

type Msg_Preprepare struct {
	Preprepare *Preprepare `protobuf:"bytes,1,opt,name=preprepare,oneof"`
}
type Msg_Prepare struct {
	Prepare *Prepare `protobuf:"bytes,2,opt,name=prepare,oneof"`
}
type Msg_Commit struct {
	Commit *Commit `protobuf:"bytes,3,opt,name=commit,oneof"`
}
type Msg_Checkpoint struct {
	Checkpoint *Checkpoint `protobuf:"bytes,4,opt,name=checkpoint,oneof"`
}
type Msg_Suspect struct {
	Suspect *Suspect `protobuf:"bytes,5,opt,name=suspect,oneof"`
}
type Msg_EpochChange struct {
	EpochChange *EpochChange `protobuf:"bytes,6,opt,name=epoch_change,json=epochChange,oneof"`
}
type Msg_EpochChangeAck struct {
	EpochChangeAck *EpochChangeAck `protobuf:"bytes,7,opt,name=epoch_change_ack,json=epochChangeAck,oneof"`
}
type Msg_NewEpoch struct {
	NewEpoch *NewEpoch `protobuf:"bytes,8,opt,name=new_epoch,json=newEpoch,oneof"`
}
type Msg_NewEpochEcho struct {
	NewEpochEcho *NewEpochEcho `protobuf:"bytes,9,opt,name=new_epoch_echo,json=newEpochEcho,oneof"`
}
type Msg_NewEpochReady struct {
	NewEpochReady *NewEpochReady `protobuf:"bytes,10,opt,name=new_epoch_ready,json=newEpochReady,oneof"`
}
type Msg_FetchBatch struct {
	FetchBatch *FetchBatch `protobuf:"bytes,11,opt,name=fetch_batch,json=fetchBatch,oneof"`
}
type Msg_ForwardBatch struct {
	ForwardBatch *ForwardBatch `protobuf:"bytes,12,opt,name=forward_batch,json=forwardBatch,oneof"`
}
type Msg_FetchRequest struct {
	FetchRequest *RequestAck `protobuf:"bytes,13,opt,name=fetch_request,json=fetchRequest,oneof"`
}
type Msg_ForwardRequest struct {
	ForwardRequest *ForwardRequest `protobuf:"bytes,14,opt,name=forward_request,json=forwardRequest,oneof"`
}
type Msg_RequestAck struct {
	RequestAck *RequestAck `protobuf:"bytes,15,opt,name=request_ack,json=requestAck,oneof"`
}

func (*Msg_Preprepare) isMsg_Type()     {}
func (*Msg_Prepare) isMsg_Type()        {}
func (*Msg_Commit) isMsg_Type()         {}
func (*Msg_Checkpoint) isMsg_Type()     {}
func (*Msg_Suspect) isMsg_Type()        {}
func (*Msg_EpochChange) isMsg_Type()    {}
func (*Msg_EpochChangeAck) isMsg_Type() {}
func (*Msg_NewEpoch) isMsg_Type()       {}
func (*Msg_NewEpochEcho) isMsg_Type()   {}
func (*Msg_NewEpochReady) isMsg_Type()  {}
func (*Msg_FetchBatch) isMsg_Type()     {}
func (*Msg_ForwardBatch) isMsg_Type()   {}
func (*Msg_FetchRequest) isMsg_Type()   {}
func (*Msg_ForwardRequest) isMsg_Type() {}
func (*Msg_RequestAck) isMsg_Type()     {}

func (m *Msg) GetType() isMsg_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Msg) GetPreprepare() *Preprepare {
	if x, ok := m.GetType().(*Msg_Preprepare); ok {
		return x.Preprepare
	}
	return nil
}

func (m *Msg) GetPrepare() *Prepare {
	if x, ok := m.GetType().(*Msg_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *Msg) GetCommit() *Commit {
	if x, ok := m.GetType().(*Msg_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *Msg) GetCheckpoint() *Checkpoint {
	if x, ok := m.GetType().(*Msg_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (m *Msg) GetSuspect() *Suspect {
	if x, ok := m.GetType().(*Msg_Suspect); ok {
		return x.Suspect
	}
	return nil
}

func (m *Msg) GetEpochChange() *EpochChange {
	if x, ok := m.GetType().(*Msg_EpochChange); ok {
		return x.EpochChange
	}
	return nil
}

func (m *Msg) GetEpochChangeAck() *EpochChangeAck {
	if x, ok := m.GetType().(*Msg_EpochChangeAck); ok {
		return x.EpochChangeAck
	}
	return nil
}

func (m *Msg) GetNewEpoch() *NewEpoch {
	if x, ok := m.GetType().(*Msg_NewEpoch); ok {
		return x.NewEpoch
	}
	return nil
}

func (m *Msg) GetNewEpochEcho() *NewEpochEcho {
	if x, ok := m.GetType().(*Msg_NewEpochEcho); ok {
		return x.NewEpochEcho
	}
	return nil
}

func (m *Msg) GetNewEpochReady() *NewEpochReady {
	if x, ok := m.GetType().(*Msg_NewEpochReady); ok {
		return x.NewEpochReady
	}
	return nil
}

func (m *Msg) GetFetchBatch() *FetchBatch {
	if x, ok := m.GetType().(*Msg_FetchBatch); ok {
		return x.FetchBatch
	}
	return nil
}

func (m *Msg) GetForwardBatch() *ForwardBatch {
	if x, ok := m.GetType().(*Msg_ForwardBatch); ok {
		return x.ForwardBatch
	}
	return nil
}

func (m *Msg) GetFetchRequest() *RequestAck {
	if x, ok := m.GetType().(*Msg_FetchRequest); ok {
		return x.FetchRequest
	}
	return nil
}

func (m *Msg) GetForwardRequest() *ForwardRequest {
	if x, ok := m.GetType().(*Msg_ForwardRequest); ok {
		return x.ForwardRequest
	}
	return nil
}

func (m *Msg) GetRequestAck() *RequestAck {
	if x, ok := m.GetType().(*Msg_RequestAck); ok {
		return x.RequestAck
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Msg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Msg_OneofMarshaler, _Msg_OneofUnmarshaler, _Msg_OneofSizer, []interface{}{
		(*Msg_Preprepare)(nil),
		(*Msg_Prepare)(nil),
		(*Msg_Commit)(nil),
		(*Msg_Checkpoint)(nil),
		(*Msg_Suspect)(nil),
		(*Msg_EpochChange)(nil),
		(*Msg_EpochChangeAck)(nil),
		(*Msg_NewEpoch)(nil),
		(*Msg_NewEpochEcho)(nil),
		(*Msg_NewEpochReady)(nil),
		(*Msg_FetchBatch)(nil),
		(*Msg_ForwardBatch)(nil),
		(*Msg_FetchRequest)(nil),
		(*Msg_ForwardRequest)(nil),
		(*Msg_RequestAck)(nil),
	}
}

func _Msg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Msg)
	// type
	switch x := m.Type.(type) {
	case *Msg_Preprepare:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Preprepare); err != nil {
			return err
		}
	case *Msg_Prepare:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *Msg_Commit:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *Msg_Checkpoint:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Checkpoint); err != nil {
			return err
		}
	case *Msg_Suspect:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Suspect); err != nil {
			return err
		}
	case *Msg_EpochChange:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpochChange); err != nil {
			return err
		}
	case *Msg_EpochChangeAck:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpochChangeAck); err != nil {
			return err
		}
	case *Msg_NewEpoch:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewEpoch); err != nil {
			return err
		}
	case *Msg_NewEpochEcho:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewEpochEcho); err != nil {
			return err
		}
	case *Msg_NewEpochReady:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewEpochReady); err != nil {
			return err
		}
	case *Msg_FetchBatch:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FetchBatch); err != nil {
			return err
		}
	case *Msg_ForwardBatch:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardBatch); err != nil {
			return err
		}
	case *Msg_FetchRequest:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FetchRequest); err != nil {
			return err
		}
	case *Msg_ForwardRequest:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardRequest); err != nil {
			return err
		}
	case *Msg_RequestAck:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestAck); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Msg.Type has unexpected type %T", x)
	}
	return nil
}

func _Msg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Msg)
	switch tag {
	case 1: // type.preprepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Preprepare)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_Preprepare{msg}
		return true, err
	case 2: // type.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Prepare)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_Prepare{msg}
		return true, err
	case 3: // type.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Commit)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_Commit{msg}
		return true, err
	case 4: // type.checkpoint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Checkpoint)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_Checkpoint{msg}
		return true, err
	case 5: // type.suspect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Suspect)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_Suspect{msg}
		return true, err
	case 6: // type.epoch_change
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EpochChange)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_EpochChange{msg}
		return true, err
	case 7: // type.epoch_change_ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EpochChangeAck)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_EpochChangeAck{msg}
		return true, err
	case 8: // type.new_epoch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewEpoch)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_NewEpoch{msg}
		return true, err
	case 9: // type.new_epoch_echo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewEpochEcho)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_NewEpochEcho{msg}
		return true, err
	case 10: // type.new_epoch_ready
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewEpochReady)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_NewEpochReady{msg}
		return true, err
	case 11: // type.fetch_batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FetchBatch)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_FetchBatch{msg}
		return true, err
	case 12: // type.forward_batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardBatch)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_ForwardBatch{msg}
		return true, err
	case 13: // type.fetch_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestAck)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_FetchRequest{msg}
		return true, err
	case 14: // type.forward_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardRequest)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_ForwardRequest{msg}
		return true, err
	case 15: // type.request_ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestAck)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_RequestAck{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Msg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Msg)
	// type
	switch x := m.Type.(type) {
	case *Msg_Preprepare:
		s := proto.Size(x.Preprepare)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_Prepare:
		s := proto.Size(x.Prepare)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_Commit:
		s := proto.Size(x.Commit)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_Checkpoint:
		s := proto.Size(x.Checkpoint)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_Suspect:
		s := proto.Size(x.Suspect)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_EpochChange:
		s := proto.Size(x.EpochChange)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_EpochChangeAck:
		s := proto.Size(x.EpochChangeAck)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_NewEpoch:
		s := proto.Size(x.NewEpoch)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_NewEpochEcho:
		s := proto.Size(x.NewEpochEcho)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_NewEpochReady:
		s := proto.Size(x.NewEpochReady)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_FetchBatch:
		s := proto.Size(x.FetchBatch)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_ForwardBatch:
		s := proto.Size(x.ForwardBatch)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_FetchRequest:
		s := proto.Size(x.FetchRequest)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_ForwardRequest:
		s := proto.Size(x.ForwardRequest)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_RequestAck:
		s := proto.Size(x.RequestAck)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FetchBatch struct {
	SeqNo  uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	Digest []byte `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *FetchBatch) Reset()                    { *m = FetchBatch{} }
func (m *FetchBatch) String() string            { return proto.CompactTextString(m) }
func (*FetchBatch) ProtoMessage()               {}
func (*FetchBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FetchBatch) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *FetchBatch) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type ForwardBatch struct {
	SeqNo       uint64        `protobuf:"varint,1,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	RequestAcks []*RequestAck `protobuf:"bytes,2,rep,name=request_acks,json=requestAcks" json:"request_acks,omitempty"`
	Digest      []byte        `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *ForwardBatch) Reset()                    { *m = ForwardBatch{} }
func (m *ForwardBatch) String() string            { return proto.CompactTextString(m) }
func (*ForwardBatch) ProtoMessage()               {}
func (*ForwardBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ForwardBatch) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *ForwardBatch) GetRequestAcks() []*RequestAck {
	if m != nil {
		return m.RequestAcks
	}
	return nil
}

func (m *ForwardBatch) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type ForwardRequest struct {
	Request *Request `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Digest  []byte   `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *ForwardRequest) Reset()                    { *m = ForwardRequest{} }
func (m *ForwardRequest) String() string            { return proto.CompactTextString(m) }
func (*ForwardRequest) ProtoMessage()               {}
func (*ForwardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ForwardRequest) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ForwardRequest) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type Request struct {
	ClientId []byte `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ReqNo    uint64 `protobuf:"varint,2,opt,name=req_no,json=reqNo" json:"req_no,omitempty"`
	Data     []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Request) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *Request) GetReqNo() uint64 {
	if m != nil {
		return m.ReqNo
	}
	return 0
}

func (m *Request) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RequestAck struct {
	ClientId []byte `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ReqNo    uint64 `protobuf:"varint,2,opt,name=req_no,json=reqNo" json:"req_no,omitempty"`
	Digest   []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *RequestAck) Reset()                    { *m = RequestAck{} }
func (m *RequestAck) String() string            { return proto.CompactTextString(m) }
func (*RequestAck) ProtoMessage()               {}
func (*RequestAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RequestAck) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *RequestAck) GetReqNo() uint64 {
	if m != nil {
		return m.ReqNo
	}
	return 0
}

func (m *RequestAck) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type Preprepare struct {
	SeqNo uint64        `protobuf:"varint,1,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	Epoch uint64        `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	Batch []*RequestAck `protobuf:"bytes,3,rep,name=batch" json:"batch,omitempty"`
}

func (m *Preprepare) Reset()                    { *m = Preprepare{} }
func (m *Preprepare) String() string            { return proto.CompactTextString(m) }
func (*Preprepare) ProtoMessage()               {}
func (*Preprepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Preprepare) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *Preprepare) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Preprepare) GetBatch() []*RequestAck {
	if m != nil {
		return m.Batch
	}
	return nil
}

type Prepare struct {
	SeqNo  uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	Epoch  uint64 `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *Prepare) Reset()                    { *m = Prepare{} }
func (m *Prepare) String() string            { return proto.CompactTextString(m) }
func (*Prepare) ProtoMessage()               {}
func (*Prepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Prepare) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *Prepare) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Prepare) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type Commit struct {
	SeqNo  uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	Epoch  uint64 `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Commit) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *Commit) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Commit) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type Checkpoint struct {
	SeqNo uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Checkpoint) Reset()                    { *m = Checkpoint{} }
func (m *Checkpoint) String() string            { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()               {}
func (*Checkpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Checkpoint) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *Checkpoint) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Suspect struct {
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
}

func (m *Suspect) Reset()                    { *m = Suspect{} }
func (m *Suspect) String() string            { return proto.CompactTextString(m) }
func (*Suspect) ProtoMessage()               {}
func (*Suspect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Suspect) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// EpochChange messages are used to implement the classical PBFT view-change
// protocol, (very) slightly modified to adapt to Mir.  The assorted sets
// are encoded as repeated fields, rather than as maps for ease of serialization
// and particularly for computing a digest to attest to.  If any set contains
// a duplicated entry, the message may be discarded as byzantine.
type EpochChange struct {
	NewEpoch uint64 `protobuf:"varint,1,opt,name=new_epoch,json=newEpoch" json:"new_epoch,omitempty"`
	// c_set contains the entries for the C-set as defined by the classical
	// PBFT view-change protocol.
	Checkpoints []*Checkpoint `protobuf:"bytes,2,rep,name=checkpoints" json:"checkpoints,omitempty"`
	// p_set contains the entries for the P-set as defined by the classical
	// PBFT view-change protocol.
	PSet []*EpochChange_SetEntry `protobuf:"bytes,3,rep,name=p_set,json=pSet" json:"p_set,omitempty"`
	// q_set contains the entries for the Q-set as defined by the classical
	// PBFT view-change protocol.
	QSet []*EpochChange_SetEntry `protobuf:"bytes,4,rep,name=q_set,json=qSet" json:"q_set,omitempty"`
}

func (m *EpochChange) Reset()                    { *m = EpochChange{} }
func (m *EpochChange) String() string            { return proto.CompactTextString(m) }
func (*EpochChange) ProtoMessage()               {}
func (*EpochChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EpochChange) GetNewEpoch() uint64 {
	if m != nil {
		return m.NewEpoch
	}
	return 0
}

func (m *EpochChange) GetCheckpoints() []*Checkpoint {
	if m != nil {
		return m.Checkpoints
	}
	return nil
}

func (m *EpochChange) GetPSet() []*EpochChange_SetEntry {
	if m != nil {
		return m.PSet
	}
	return nil
}

func (m *EpochChange) GetQSet() []*EpochChange_SetEntry {
	if m != nil {
		return m.QSet
	}
	return nil
}

type EpochChange_SetEntry struct {
	Epoch  uint64 `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
	SeqNo  uint64 `protobuf:"varint,2,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *EpochChange_SetEntry) Reset()                    { *m = EpochChange_SetEntry{} }
func (m *EpochChange_SetEntry) String() string            { return proto.CompactTextString(m) }
func (*EpochChange_SetEntry) ProtoMessage()               {}
func (*EpochChange_SetEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15, 0} }

func (m *EpochChange_SetEntry) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *EpochChange_SetEntry) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *EpochChange_SetEntry) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

// EpochChangeAck messages are broadcast in response to receiving a valid epoch change
// from a replica.  Replicas collect these epoch change ack messages, and when there are 2f+1
// such messages begin to count that epoch change as appropriately broadcast for purposes of
// the epoch change timer.
type EpochChangeAck struct {
	Originator uint64 `protobuf:"varint,1,opt,name=originator" json:"originator,omitempty"`
	// epoch_change is included fully instead of echo-ing the digest as suggested by the original
	// PBFT paper.  This is purely to prevent requiring a separate fetch step for missing epoch change
	// requests.  Although this is slightly heavier, because ungraceful epoch change is not a performance
	// optimal path, the simplification seems worthwhile.
	EpochChange *EpochChange `protobuf:"bytes,2,opt,name=epoch_change,json=epochChange" json:"epoch_change,omitempty"`
}

func (m *EpochChangeAck) Reset()                    { *m = EpochChangeAck{} }
func (m *EpochChangeAck) String() string            { return proto.CompactTextString(m) }
func (*EpochChangeAck) ProtoMessage()               {}
func (*EpochChangeAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *EpochChangeAck) GetOriginator() uint64 {
	if m != nil {
		return m.Originator
	}
	return 0
}

func (m *EpochChangeAck) GetEpochChange() *EpochChange {
	if m != nil {
		return m.EpochChange
	}
	return nil
}

type EpochConfig struct {
	// number of this new epoch
	Number             uint64      `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	StartingCheckpoint *Checkpoint `protobuf:"bytes,2,opt,name=starting_checkpoint,json=startingCheckpoint" json:"starting_checkpoint,omitempty"`
	Leaders            []uint64    `protobuf:"varint,3,rep,packed,name=leaders" json:"leaders,omitempty"`
	// final_preprepares finalizes the last checkpoint window or windows
	// which some correct replica preprepared a sequence in. The entries are
	// digests indexed by sequence number offset by the starting_checkpoint
	// seq_no. An empty digest corresponds to a null request.
	FinalPreprepares [][]byte `protobuf:"bytes,4,rep,name=final_preprepares,json=finalPreprepares,proto3" json:"final_preprepares,omitempty"`
}

func (m *EpochConfig) Reset()                    { *m = EpochConfig{} }
func (m *EpochConfig) String() string            { return proto.CompactTextString(m) }
func (*EpochConfig) ProtoMessage()               {}
func (*EpochConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *EpochConfig) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *EpochConfig) GetStartingCheckpoint() *Checkpoint {
	if m != nil {
		return m.StartingCheckpoint
	}
	return nil
}

func (m *EpochConfig) GetLeaders() []uint64 {
	if m != nil {
		return m.Leaders
	}
	return nil
}

func (m *EpochConfig) GetFinalPreprepares() [][]byte {
	if m != nil {
		return m.FinalPreprepares
	}
	return nil
}

// NewEpoch is akin to the NewView message in classical PBFT and follows the same
// semantics.  Optionally, for graceful epoch change, the epoch_changes field may
// be empty.  In the event that the previous epoch does not complete gracefully,
// the graceful NewEpoch is ignored.  Unlike in classical PBFT, we employ a classical
// Bracha reliable broadcast on embedded config.  A replica should respond to a NewEpoch
// message with a NewEpochEcho (assuming that the NewEpoch message is validly constructed).
type NewEpoch struct {
	Config *EpochConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	// epoch_changes must contains at least 2f+1 EpochChange messages references from
	// replicas in the network.  If two EpochChanges references originated from the same
	// replica, then the NewEpoch message is invalid.
	EpochChanges []*NewEpoch_RemoteEpochChange `protobuf:"bytes,2,rep,name=epoch_changes,json=epochChanges" json:"epoch_changes,omitempty"`
}

func (m *NewEpoch) Reset()                    { *m = NewEpoch{} }
func (m *NewEpoch) String() string            { return proto.CompactTextString(m) }
func (*NewEpoch) ProtoMessage()               {}
func (*NewEpoch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *NewEpoch) GetConfig() *EpochConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *NewEpoch) GetEpochChanges() []*NewEpoch_RemoteEpochChange {
	if m != nil {
		return m.EpochChanges
	}
	return nil
}

type NewEpoch_RemoteEpochChange struct {
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Digest []byte `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *NewEpoch_RemoteEpochChange) Reset()                    { *m = NewEpoch_RemoteEpochChange{} }
func (m *NewEpoch_RemoteEpochChange) String() string            { return proto.CompactTextString(m) }
func (*NewEpoch_RemoteEpochChange) ProtoMessage()               {}
func (*NewEpoch_RemoteEpochChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18, 0} }

func (m *NewEpoch_RemoteEpochChange) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *NewEpoch_RemoteEpochChange) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

// NewEpochReady is for the second round of the classical Bracha reliable broadcast.  Note,
// that the message embeds only the config.  This is because the config is derived from
// the epoch_changes, and a correct replica will only echo the request if the config is validly
// constructed.  Since the echo phase only proceeds to ready if 2f+1 echos occur, some (actually, f+1)
// correct replicas must have validated the new config according to the epoch_changes.
type NewEpochEcho struct {
	Config *EpochConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *NewEpochEcho) Reset()                    { *m = NewEpochEcho{} }
func (m *NewEpochEcho) String() string            { return proto.CompactTextString(m) }
func (*NewEpochEcho) ProtoMessage()               {}
func (*NewEpochEcho) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *NewEpochEcho) GetConfig() *EpochConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// NewEpochReady is for the final round fo the classical Bracha reliable broadcast.
type NewEpochReady struct {
	Config *EpochConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *NewEpochReady) Reset()                    { *m = NewEpochReady{} }
func (m *NewEpochReady) String() string            { return proto.CompactTextString(m) }
func (*NewEpochReady) ProtoMessage()               {}
func (*NewEpochReady) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *NewEpochReady) GetConfig() *EpochConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkConfig)(nil), "mirbftpb.NetworkConfig")
	proto.RegisterType((*Persisted)(nil), "mirbftpb.Persisted")
	proto.RegisterType((*QEntry)(nil), "mirbftpb.QEntry")
	proto.RegisterType((*PEntry)(nil), "mirbftpb.PEntry")
	proto.RegisterType((*Msg)(nil), "mirbftpb.Msg")
	proto.RegisterType((*FetchBatch)(nil), "mirbftpb.FetchBatch")
	proto.RegisterType((*ForwardBatch)(nil), "mirbftpb.ForwardBatch")
	proto.RegisterType((*ForwardRequest)(nil), "mirbftpb.ForwardRequest")
	proto.RegisterType((*Request)(nil), "mirbftpb.Request")
	proto.RegisterType((*RequestAck)(nil), "mirbftpb.RequestAck")
	proto.RegisterType((*Preprepare)(nil), "mirbftpb.Preprepare")
	proto.RegisterType((*Prepare)(nil), "mirbftpb.Prepare")
	proto.RegisterType((*Commit)(nil), "mirbftpb.Commit")
	proto.RegisterType((*Checkpoint)(nil), "mirbftpb.Checkpoint")
	proto.RegisterType((*Suspect)(nil), "mirbftpb.Suspect")
	proto.RegisterType((*EpochChange)(nil), "mirbftpb.EpochChange")
	proto.RegisterType((*EpochChange_SetEntry)(nil), "mirbftpb.EpochChange.SetEntry")
	proto.RegisterType((*EpochChangeAck)(nil), "mirbftpb.EpochChangeAck")
	proto.RegisterType((*EpochConfig)(nil), "mirbftpb.EpochConfig")
	proto.RegisterType((*NewEpoch)(nil), "mirbftpb.NewEpoch")
	proto.RegisterType((*NewEpoch_RemoteEpochChange)(nil), "mirbftpb.NewEpoch.RemoteEpochChange")
	proto.RegisterType((*NewEpochEcho)(nil), "mirbftpb.NewEpochEcho")
	proto.RegisterType((*NewEpochReady)(nil), "mirbftpb.NewEpochReady")
}

func init() { proto.RegisterFile("mirbft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1097 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x65, 0x8a, 0x92, 0x47, 0x94, 0x6c, 0x6f, 0x12, 0x87, 0x48, 0x81, 0xd4, 0x20, 0x7a,
	0x10, 0x1c, 0xc4, 0x45, 0x9d, 0x22, 0x69, 0x1b, 0x24, 0x40, 0xec, 0x38, 0x90, 0x81, 0xda, 0x71,
	0xd6, 0x28, 0xd0, 0x1b, 0x41, 0x91, 0x43, 0x89, 0xb5, 0x44, 0x4a, 0xe4, 0xda, 0x8e, 0xcf, 0x7d,
	0x8e, 0x9e, 0xfa, 0x08, 0xbd, 0xf5, 0x11, 0xfa, 0x38, 0x7d, 0x82, 0x60, 0x7f, 0x28, 0xae, 0xfe,
	0x8c, 0x24, 0x30, 0xa0, 0x83, 0x66, 0xe6, 0xfb, 0x76, 0xe7, 0x67, 0x77, 0x66, 0x09, 0xf6, 0x28,
	0xce, 0x7a, 0x11, 0xdb, 0x1b, 0x67, 0x29, 0x4b, 0x49, 0x43, 0x4a, 0xe3, 0x9e, 0xfb, 0xaf, 0x01,
	0xad, 0x53, 0x64, 0xd7, 0x69, 0x76, 0x71, 0x98, 0x26, 0x51, 0xdc, 0x27, 0xf7, 0xa1, 0x96, 0xa4,
	0x21, 0xe6, 0x8e, 0xb1, 0xb3, 0xd6, 0x31, 0xa9, 0x14, 0xc8, 0xf7, 0x70, 0x2f, 0x18, 0x60, 0x70,
	0x31, 0x4e, 0xe3, 0x84, 0x79, 0x71, 0xc2, 0x30, 0xbb, 0xf2, 0x87, 0x4e, 0x75, 0xc7, 0xe8, 0xd4,
	0x28, 0x29, 0x4d, 0xc7, 0xca, 0x42, 0x3a, 0xb0, 0x39, 0xf2, 0x3f, 0x7a, 0x38, 0x4e, 0x83, 0x81,
	0x37, 0xc4, 0xa4, 0xcf, 0x06, 0xce, 0xda, 0x8e, 0xd1, 0x31, 0x69, 0x7b, 0xe4, 0x7f, 0x3c, 0xe2,
	0xea, 0x5f, 0x85, 0x96, 0xec, 0xc2, 0x56, 0x72, 0x39, 0xea, 0x61, 0xe6, 0xa5, 0x91, 0xd7, 0xbb,
	0x0c, 0x2e, 0x90, 0xe5, 0x8e, 0x29, 0x16, 0xde, 0x90, 0x86, 0xf7, 0xd1, 0x81, 0x54, 0x13, 0x1b,
	0x8c, 0xc8, 0xa9, 0x09, 0x9b, 0x11, 0xb9, 0x7f, 0x1b, 0xb0, 0x7e, 0x86, 0x59, 0x1e, 0xe7, 0x0c,
	0x43, 0xb2, 0x0b, 0xd6, 0x04, 0x13, 0x96, 0xdd, 0x38, 0xc6, 0x8e, 0xd1, 0x69, 0xee, 0x6f, 0xee,
	0x15, 0x51, 0xee, 0x7d, 0x38, 0xe2, 0xfa, 0x6e, 0x85, 0x2a, 0x04, 0xc7, 0x8e, 0x25, 0xb6, 0x3a,
	0x8f, 0x3d, 0x9b, 0x62, 0x25, 0x82, 0x3c, 0x07, 0x28, 0xe3, 0x13, 0x31, 0x34, 0xf7, 0xef, 0x97,
	0xf8, 0xc3, 0xa9, 0xad, 0x5b, 0xa1, 0x1a, 0xf2, 0xc0, 0x02, 0x93, 0xdd, 0x8c, 0xd1, 0xfd, 0xd3,
	0x00, 0x4b, 0x3a, 0xc0, 0x73, 0x2b, 0x12, 0x22, 0x3c, 0x34, 0xa9, 0x14, 0xc8, 0x03, 0xb0, 0x72,
	0x9c, 0x78, 0x49, 0x2a, 0x9c, 0x31, 0x69, 0x2d, 0xc7, 0xc9, 0x69, 0x4a, 0xb6, 0xc1, 0x0a, 0xe3,
	0x3e, 0xe6, 0x72, 0x4f, 0x9b, 0x2a, 0x89, 0xfc, 0x08, 0x8d, 0x0c, 0x27, 0x97, 0x98, 0x8b, 0x34,
	0xad, 0x75, 0x9a, 0xfb, 0x4e, 0xe9, 0xcd, 0xbb, 0x34, 0xbb, 0xf6, 0xb3, 0x90, 0x4a, 0x00, 0x9d,
	0x22, 0xdd, 0x13, 0xb0, 0xce, 0xee, 0xce, 0x09, 0xf7, 0x7f, 0x0b, 0xd6, 0x4e, 0xf2, 0x3e, 0x4f,
	0xce, 0x38, 0x43, 0xfe, 0xf3, 0x33, 0x54, 0x89, 0xd7, 0x92, 0x73, 0x36, 0xb5, 0xf1, 0xe4, 0x94,
	0x48, 0xf2, 0x14, 0xea, 0x05, 0x49, 0x56, 0x60, 0x6b, 0x96, 0x24, 0x19, 0x05, 0x86, 0xd7, 0x2b,
	0x48, 0x47, 0xa3, 0xb8, 0xc8, 0xbf, 0x56, 0xaf, 0x43, 0xa1, 0xe7, 0xf5, 0x92, 0x88, 0xb9, 0x7a,
	0x99, 0x9f, 0x5b, 0x2f, 0xee, 0x52, 0x7e, 0x99, 0x8f, 0x31, 0x60, 0xe2, 0x84, 0xcd, 0xb8, 0x74,
	0x2e, 0x0d, 0xdc, 0x25, 0x85, 0x21, 0xbf, 0x80, 0x2d, 0x0f, 0x77, 0x30, 0xf0, 0x93, 0x3e, 0x3a,
	0x96, 0xe0, 0x3c, 0x28, 0x39, 0xe2, 0x8c, 0x1f, 0x0a, 0x63, 0xb7, 0x42, 0x9b, 0x58, 0x8a, 0xe4,
	0x2d, 0x6c, 0xea, 0x5c, 0xcf, 0x0f, 0x2e, 0x9c, 0xba, 0xe0, 0x3b, 0x4b, 0xf9, 0x6f, 0x82, 0x8b,
	0x6e, 0x85, 0xb6, 0x71, 0x46, 0x43, 0x7e, 0x80, 0xf5, 0x04, 0xaf, 0xe5, 0x15, 0x73, 0x1a, 0x82,
	0x4e, 0x4a, 0xfa, 0x29, 0x5e, 0x8b, 0x15, 0xba, 0x15, 0xda, 0x48, 0xd4, 0x7f, 0xf2, 0x1a, 0xda,
	0x53, 0x8a, 0x87, 0xc1, 0x20, 0x75, 0xd6, 0x05, 0x6f, 0x7b, 0x91, 0x77, 0x14, 0x0c, 0xd2, 0x6e,
	0x85, 0xda, 0x89, 0x26, 0x93, 0x37, 0xb0, 0x51, 0xf2, 0x33, 0xf4, 0xc3, 0x1b, 0x07, 0xc4, 0x02,
	0x0f, 0x17, 0x17, 0xa0, 0xdc, 0xdc, 0xad, 0xd0, 0x56, 0xa2, 0x2b, 0xc8, 0x0b, 0x68, 0x46, 0xc8,
	0x82, 0x81, 0xd7, 0xf3, 0x59, 0x30, 0x70, 0x9a, 0xf3, 0xf5, 0x79, 0xc7, 0x8d, 0x07, 0xdc, 0xc6,
	0xeb, 0x13, 0x4d, 0x25, 0xf2, 0x0a, 0x5a, 0x91, 0x3c, 0xdd, 0x8a, 0x6a, 0xcf, 0xbb, 0xae, 0x0e,
	0x7f, 0x41, 0xb6, 0x23, 0x4d, 0x26, 0x2f, 0xa1, 0x25, 0xf7, 0x55, 0x57, 0xc2, 0x69, 0xcd, 0xef,
	0xac, 0x2e, 0x8d, 0x4c, 0xb6, 0x2d, 0xc0, 0x4a, 0x45, 0x0e, 0x61, 0xa3, 0xd8, 0xbb, 0xa0, 0xb7,
	0xe7, 0xeb, 0x35, 0x7b, 0xf5, 0x78, 0xbd, 0xa2, 0x19, 0x0d, 0x8f, 0x5c, 0x91, 0x45, 0xc1, 0x37,
	0x6e, 0xdd, 0x1f, 0xb2, 0xa9, 0x34, 0xed, 0x24, 0x2f, 0x01, 0xca, 0xec, 0x68, 0x37, 0xd6, 0x58,
	0x7e, 0x63, 0xab, 0x33, 0x37, 0xf6, 0x0a, 0x6c, 0x3d, 0x3f, 0xab, 0xe8, 0x2f, 0xc0, 0xd6, 0x9c,
	0xcc, 0x9d, 0xaa, 0xe8, 0x30, 0x4b, 0xbd, 0xa4, 0xcd, 0xd2, 0xc7, 0x7c, 0x65, 0xa7, 0xf8, 0x0d,
	0xda, 0xb3, 0x99, 0x21, 0x4f, 0xa0, 0x5e, 0x24, 0xd1, 0x98, 0xbf, 0x68, 0x45, 0xe3, 0x2a, 0x10,
	0x2b, 0xc3, 0xf9, 0x00, 0xf5, 0x62, 0xbd, 0x6f, 0x60, 0x3d, 0x18, 0xc6, 0xc8, 0xe7, 0x52, 0x28,
	0x56, 0xb4, 0x69, 0x43, 0x2a, 0x8e, 0x43, 0x1e, 0x66, 0x36, 0xd3, 0xd7, 0x32, 0x11, 0x26, 0x01,
	0x33, 0xf4, 0x99, 0xaf, 0x7c, 0x15, 0xff, 0xdd, 0xdf, 0x01, 0xca, 0xe0, 0xbe, 0x6a, 0xd5, 0x55,
	0x39, 0x40, 0x80, 0xb2, 0x13, 0xae, 0xca, 0xfc, 0xb4, 0x2f, 0x57, 0xf5, 0xbe, 0xbc, 0x0b, 0x35,
	0x79, 0xda, 0xd7, 0x6e, 0x29, 0x84, 0x84, 0xb8, 0xa7, 0x50, 0x3f, 0xfb, 0x9a, 0x3d, 0x56, 0xb9,
	0x7d, 0x02, 0x96, 0xec, 0xae, 0x77, 0xb3, 0xdc, 0xcf, 0x00, 0x65, 0xf3, 0xbd, 0x65, 0xc9, 0x2b,
	0x7f, 0x78, 0x89, 0xaa, 0xdc, 0x52, 0x70, 0xbf, 0x85, 0xba, 0x6a, 0xc1, 0xcb, 0xc7, 0x97, 0xfb,
	0x57, 0x15, 0x9a, 0x5a, 0xc3, 0xe4, 0xd5, 0x2b, 0x7b, 0xa3, 0x44, 0x96, 0x5d, 0xf0, 0x39, 0x34,
	0xcb, 0xbe, 0xbf, 0xe4, 0x88, 0x97, 0x5e, 0x52, 0x1d, 0x48, 0x9e, 0x41, 0x6d, 0xec, 0xe5, 0xc8,
	0x54, 0x2d, 0x1e, 0x2f, 0xed, 0xd5, 0x7b, 0xe7, 0xc8, 0xc4, 0xa0, 0xa5, 0xe6, 0xf8, 0x1c, 0x19,
	0x27, 0x4d, 0x04, 0xc9, 0xfc, 0x3c, 0xd2, 0xe4, 0x1c, 0xd9, 0xa3, 0xf7, 0xd0, 0x28, 0x34, 0x77,
	0x33, 0xaf, 0xff, 0x80, 0xf6, 0xec, 0x3c, 0x21, 0x8f, 0x01, 0xd2, 0x2c, 0xee, 0xc7, 0x89, 0xcf,
	0xd2, 0x4c, 0xad, 0xad, 0x69, 0xc8, 0x4f, 0x73, 0xf3, 0xad, 0x7a, 0xcb, 0x7c, 0x9b, 0x99, 0x6e,
	0xee, 0x3f, 0x46, 0x51, 0x0b, 0xf9, 0xa2, 0xdc, 0x06, 0x4b, 0xbe, 0xe3, 0xd4, 0x2e, 0x4a, 0x22,
	0x47, 0x70, 0x2f, 0x67, 0x7e, 0xc6, 0xe2, 0xa4, 0xef, 0x69, 0x13, 0xbb, 0xba, 0x7a, 0x62, 0x53,
	0x52, 0x10, 0xb4, 0x83, 0xe4, 0x40, 0x7d, 0x88, 0x7e, 0x88, 0x59, 0x2e, 0xea, 0x62, 0xd2, 0x42,
	0x24, 0x4f, 0x60, 0x2b, 0x8a, 0x13, 0x7f, 0xe8, 0x95, 0x0f, 0x0f, 0xf9, 0x64, 0xb2, 0xe9, 0xa6,
	0x30, 0x94, 0x97, 0x32, 0x77, 0xff, 0x33, 0xa0, 0x51, 0x8c, 0x2e, 0xf2, 0x94, 0xbf, 0x37, 0xb8,
	0xf3, 0xaa, 0x43, 0x2d, 0x84, 0x2d, 0x8c, 0x54, 0x81, 0xc8, 0x31, 0xb4, 0xf4, 0x5c, 0x15, 0x47,
	0xea, 0xbb, 0xc5, 0xa1, 0xb8, 0x47, 0x71, 0x94, 0x32, 0xd4, 0x73, 0x67, 0x6b, 0xb9, 0xcb, 0x1f,
	0xbd, 0x85, 0xad, 0x05, 0x08, 0x79, 0x08, 0x75, 0xfe, 0x0c, 0x2f, 0x3a, 0x11, 0x4f, 0x61, 0x1a,
	0xe2, 0x71, 0xb8, 0xb2, 0x3b, 0xbe, 0x02, 0x5b, 0x9f, 0xe3, 0x5f, 0x18, 0x8f, 0xfb, 0x9a, 0x7f,
	0x14, 0xe8, 0x43, 0xfb, 0xcb, 0xf8, 0x3d, 0x4b, 0x7c, 0x66, 0x3c, 0xfb, 0x14, 0x00, 0x00, 0xff,
	0xff, 0x8d, 0xfe, 0xd0, 0x6f, 0x76, 0x0c, 0x00, 0x00,
}
