/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package mirbftpb;

// To re-generate, run:
//   protoc --go_out=. mirbft.proto
// or simply run go generate

message Msg {
    oneof type {
        Preprepare preprepare = 1;
        Prepare prepare = 2;
        Commit commit = 3;
        Forward forward = 4;
        Checkpoint checkpoint = 5;
        Suspect suspect = 6;
        EpochChange epoch_change = 7;
    }
}

message Preprepare {
    uint64 seq_no = 1;
    uint64 epoch = 2;
    uint64 bucket = 3;
    repeated bytes batch = 4;
}

message Prepare {
    uint64 seq_no = 1;
    uint64 epoch = 2;
    uint64 bucket = 3;
    bytes digest = 4;
}

message Commit {
    uint64 seq_no = 1;
    uint64 epoch = 2;
    uint64 bucket = 3;
    bytes digest = 4;
}

message Checkpoint {
    uint64 seq_no = 1;
    bytes value = 2;
}

message Forward {
    uint64 epoch = 1;
    uint64 bucket = 2;
    bytes data = 3;
}

message Suspect {
    uint64 epoch = 1;
}

message EpochChange {
    // attestation should be a signature covering the remainder of the fields
    // in the message.  additional information may optionally be encoded in the
    // attestation.
    bytes attestation = 1;

    uint64 epoch = 2;
    uint64 low_watermark = 3;

    message Checkpoint {
        uint64 seq_no = 1;
        bytes value = 2;
    }

    // checkpoints is the C-set
    repeated Checkpoint checkpoints = 4;

    message BucketSet {
        // highest_prepared is essentially the P-set (for the bucket).  Because this implementation
        // of Mir does not allow out-of-order preparing, a seqno indicating the highest
        // prepared is adequate.  This is equivalent to indicating "I have sent commit messages
        // for this, and all previous sequence numbers in this bucket."
        uint64 highest_prepared = 1;

        // preprepared is essentially the Q-set (for the bucket).  Because this implementation
        // of Mir does not allow out-of-order prepreparing, indexes are relative to
        // the last_checkpoint_seq_no. The contents of the index is the digest of the preprepare.
        // This is equivalent to indicating "I have sent prepare messages for all of these sequence
        // numbers."
        repeated bytes preprepared = 2;
    }

    repeated BucketSet bucket_sets = 5;

}
