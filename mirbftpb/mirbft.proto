/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package mirbftpb;

// To re-generate, run:
//   protoc --go_out=. mirbft.proto
// or simply run go generate

message Msg {
    oneof type {
        Preprepare preprepare = 1;
        Prepare prepare = 2;
        Commit commit = 3;
        Forward forward = 4;
        Checkpoint checkpoint = 5;
        Suspect suspect = 6;
        EpochChange epoch_change = 7;
    }
}

message Preprepare {
    uint64 seq_no = 1;
    uint64 epoch = 2;
    uint64 bucket = 3;
    repeated bytes batch = 4;
}

message Prepare {
    uint64 seq_no = 1;
    uint64 epoch = 2;
    uint64 bucket = 3;
    bytes digest = 4;
}

message Commit {
    uint64 seq_no = 1;
    uint64 epoch = 2;
    uint64 bucket = 3;
    bytes digest = 4;
}

message Checkpoint {
    uint64 seq_no = 1;
    bytes value = 2;
}

message Forward {
    uint64 epoch = 1;
    uint64 bucket = 2;
    bytes data = 3;
}

message Suspect {
    uint64 epoch = 1;
}

// EpochChange messages are used to implement the classical PBFT view-change
// protocol, (very) slightly modified to adapt to Mir.  The assorted sets
// are encoded as repeated fields, rather than as maps for ease of serialization
// and particularly for computing a digest to attest to.  If any set contains
// a duplicated entry, the message may be discarded as byzantine.
message EpochChange {
    // attestation should be a signature covering the remainder of the fields
    // in the message.  additional information may optionally be encoded in the
    // attestation.
    bytes attestation = 1;

    uint64 new_epoch = 2;

    message Checkpoint {
        uint64 seq_no = 1;
        bytes value = 2;
    }

    // c_set contains the entries for the C-set as defined by the classical
    // PBFT view-change protocol.
    repeated Checkpoint checkpoints = 3;

    message SetEntry {
        uint64 bucket = 1;
        uint64 epoch = 2;
        uint64 seq_no = 3;
        bytes digest = 4;
    }

    // p_set contains the entries for the P-set as defined by the classical
    // PBFT view-change protocol.  
    repeated SetEntry p_set = 4;

    // q_set contains the entries for the Q-set as defined by the classical
    // PBFT view-change protocol.
    repeated SetEntry q_set = 5;
}
